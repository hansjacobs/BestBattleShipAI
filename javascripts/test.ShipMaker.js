// Generated by CoffeeScript 2.0.0-beta2
(function() {
  describe('ShipMaker', function() {
    it('CanMakeShip - X boundary max exceeded - false', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(9, 6, 1, 0);
      return expect(result).toBe(false);
    });
    it('CanMakeShip - X max boundary used - true', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(8, 6, 1, 0);
      return expect(result).toBe(true);
    });
    it('CanMakeShip - OK - true', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(6, 6, 1, 0);
      return expect(result).toBe(true);
    });
    it('CanMakeShip - X boundary min exceeded - false', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(0, 6, -1, 0);
      return expect(result).toBe(false);
    });
    it('CanMakeShip - Y boundary min exceeded - false', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(6, 0, 0, -1);
      return expect(result).toBe(false);
    });
    it('CanMakeShip - Y boundary max exceeded - false', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: []
      });
      result = shipMaker.CanMakeShip(6, 9, 0, 1);
      return expect(result).toBe(false);
    });
    it('CanMakeShip - LocationSoFar in the way - false', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: ["B2"]
      });
      result = shipMaker.CanMakeShip(1, 0, 0, 1);
      return expect(result).toBe(false);
    });
    return it('CanMakeShip - LocationSoFar not in the way - true', function() {
      var result, shipMaker;
      shipMaker = new ShipMaker({
        length: 2,
        locationsSoFar: ["B3"]
      });
      result = shipMaker.CanMakeShip(1, 0, 0, 1);
      return expect(result).toBe(true);
    });
  });

}).call(this);
